#!/usr/bin/env bash
START_TIMESTAMP=$(date '+%s%N')
currentScriptPath="${BASH_SOURCE[0]:-${(%):-%x}}" # on zsh this has to be on the top level



### Baizel build system for Javaâ„¢
###
### Usage: baizel [<BAIZEL_OPTION>...] <COMMAND> [<COMMAND_ARG>...] [-- <TARGET>...]
### Usage: baizel <CLASS_TARGET> <ARGS>...
###
### Commands:
###   build            Builds the specified targets.
###   test             Builds and runs the specified test targets.
###   run              Builds and runs a single executable target.
###   clean            Removes Baizel's output files and invalidates local cache.
###   help             Provides help for commands or the index.
###   shell            Opens `jshell` session with given target's classpath
###
### Arguments:
###   TARGET           can use one of the formats:
###                      //path/to/package:target_name   a specific target within a package
###                      //path/to/package               the main target within a package
###                      //path/to/package/...           all targets within a package and its subpackages
###                      //path/to/package:*             all targets directly within a package
###                      :target_name                    a shorthand for a target in the current package
###                      -//path/to/package:target_name  excludes a specific target
###
### Environment variables used:
###   BAIZEL_DEBUG     Enables JVM waiting debugger. Values: true, false, or port number (default port: 5005)
###   BAIZEL_VERBOSE   Enables verbose logging. Values: true, false
###   BAIZEL_JVM_OPTS  Additional JVM arguments, space-separated
function main() {
	# Bootstrap Stage 1: a thin shell script ('baizel/bin/baizel') will invoke JVM in the "single-source-file-program" mode:
	# 'java .../baizel/internal/bootstrap/Bootstrap.java "${@}"'
	# All further steps including the target tool/script will run in that JVM.

	if [[ ${1:-} == "--debug" ]]; then
		export BAIZEL_DEBUG=true
		export BAIZEL_VERBOSE=true
		shift
	fi
	if [[ ${BAIZEL_DEBUG:-} == true ]]; then
		# log each executed line of this script (best we can do on shell layer)
		set -o xtrace
		set -o verbose
	fi
	if [[ ${1:-} == "--verbose" ]]; then
		export BAIZEL_VERBOSE=true
		shift
	fi
	local args=("${@}")

	log INFO "Bootstrap Stage 1"

	if handleSourcingIntoTerminal; then
		return
	fi
	# enable bash strict mode, since we're not sourced
	set -o errexit
    set -o nounset
    set -o pipefail

	local stage2Module=$(relativePath "$(dirname "${currentScriptPath}")/../internal/bootstrap")
	local compiledClassPathRoot="${stage2Module}/.build/classes/java/main"
	local stage2Class="nl.adamg.baizel.internal.bootstrap.Bootstrap"
	configureJavaPath
	buildStage2IfCacheExpired "${stage2Module}" "${compiledClassPathRoot}" "${stage2Class}"
	startJvmWithStage2Class "${compiledClassPathRoot}" "${stage2Class}" "${args[@]}"
}



## Return true if the script was sourced and execution is already handled
function handleSourcingIntoTerminal() {
	local scriptPath=${BASH_SOURCE[${#BASH_SOURCE[@]}-1]:-${funcstack[-1]}}
	if [[ $(basename "${scriptPath}") == "baizel" ]]; then
		scriptPath=""
	fi
	local sourceMode=false
	if [[ ${ZSH_VERSION[*]:-} != "" || ${0} == "bash" ]]; then
		sourceMode=true
	fi
	if [[ ${sourceMode} != true ]]; then
		false; return
	fi
	if [[ ${scriptPath} == "" ]]; then
		true; return
	fi

	# a terminal (possibly with ZSH) sourced some baizel-powered script
	# we need to run baizel in a new process, and propagate export of env variables
	export BAIZEL_ENV_CAPTURE_FILE=$(mktemp)
	"${currentScriptPath}" "${args[@]}"
	if [[ -s "${BAIZEL_ENV_CAPTURE_FILE}" ]]; then # if file not empty
		log INFO "importing variables into env"
		set -o allexport
		source "${BAIZEL_ENV_CAPTURE_FILE}"
		set +o allexport
	fi
	rm -f "${BAIZEL_ENV_CAPTURE_FILE}"
	unset BAIZEL_ENV_CAPTURE_FILE
	true; return
}



function configureJavaPath() {
	if [[ $(which java) == "" || $(which javac) == "" ]]; then
		# if Java cannot be found, do best effort at auto-detecting
		local latestMacOsJava="$(/usr/libexec/java_home 2>/dev/null || true)/bin/java"
		local cleanBashJava=$(env -C "${HOME}" -i USER="${USER}" HOME="${HOME}" PWD="${HOME}" bash -l -c "which java" 2>/dev/null || true)
		local windowsStandardJava="/c/Program Files/Common Files/Oracle/Java/javapath/java"
		export PATH="${PATH}:$(dirname "${latestMacOsJava}"):$(dirname "${cleanBashJava}"):${windowsStandardJava}"
		if [[ $(which java) == "" ]]; then
			log ERROR "Java Development Kit not found (try setting \$JAVA_HOME)"
			exit 201 # JDK_NOT_FOUND
		fi
		if [[ $(which javac) == "" ]]; then
			log ERROR "Java Development Kit not found (only JRE found, JDK required) (try setting \$JAVA_HOME)"
			exit 201 # JDK_NOT_FOUND
		fi
	fi

	# ensure that PATH selects javac matching JAVA_HOME, and fix JAVA_HOME if needed
	if [[ ${JAVA_HOME:-} == "" || ! -e "${JAVA_HOME}/bin/javac" ]]; then
		export JAVA_HOME="$(dirname "$(dirname "$(which javac)")")"
	elif [[ ${JAVA_HOME:-} != "" && -e "${JAVA_HOME}/bin/javac" && $(which javac) != "${JAVA_HOME}/bin/javac" ]]; then
		export PATH="${JAVA_HOME}/bin:${PATH}"
	fi
}



function buildStage2IfCacheExpired() {
	local stage2Module=${1}
	local compiledClassPathRoot=${2}
	local stage2Class=${3}

	local sourcePathRoot="${stage2Module}/src/main/java"
	local stage2SourcePath="${sourcePathRoot}/$(echo "${stage2Class}" | tr '.' '/').java"
	local compiledPath="${stage2Module}/.build/classes/java/main/$(echo "${stage2Class}" | tr '.' '/').class"
	local bootstrapSubModules=(io java javadsl util)
	local checksum="$(pathChecksum "${stage2Module}/src/main/java")"
	for subModule in "${bootstrapSubModules[@]}"; do
		checksum+="$(pathChecksum "${stage2Module}/${subModule}/src/main/java")"
	done
	local checksumFile="${stage2Module}/.build/bootstrap.checksum"
	local lastChecksum=$(cat "${checksumFile}" 2>/dev/null || true)
	if [[ ${lastChecksum} != ${checksum} || ! -e "${compiledPath}" ]]; then
		log INFO "stage 2 checksum changed or cache not found"
		rm -rf "${stage2Module}/.build"
		mkdir "${stage2Module}/.build"
		local javacSourcePathArg="${sourcePathRoot}"
		local separator=':'
        if [[ ${WINDIR:-} != "" ]]; then
        	separator=';' # probably windows, use special separator
		fi
		local sourceRoots=( "${stage2Module}/src/main/java" )
		for subModule in "${bootstrapSubModules[@]}"; do
			sourceRoots+=( "${stage2Module}/${subModule}/src/main/java" )
		done
		local sourcePathsFile="${stage2Module}/.build/bootstrap.sourcepaths"
		find "${sourceRoots[@]}" -name "*.java" -not -name "module-info.java" > "${sourcePathsFile}"
		local compileCommand=( javac -d "${compiledClassPathRoot}" -parameters "@${sourcePathsFile}" )
		IFS=' '; log INFO "$ ${compileCommand[*]}"
		"${compileCommand[@]}"
		echo "${checksum}" > "${checksumFile}"
		log INFO "stage 2 compilation finished"
	else
		log INFO "stage 2 checksum matches, will run from cache"
	fi
}



function log() {
	local level=${1}
	local line=${2}
	if [[ ${BAIZEL_VERBOSE:-} != true && ${level} == INFO ]]; then
		return
	fi
	echo "$(date '+%H:%M:%S.%N' | cut -c 1-12) ${level} .(baizel:${BASH_LINENO[0]}) ${line}" >&2
}



function realPath(){
	(cd -- "${1%/*}" && echo "$PWD/${1##*/}")
}


function relativePath(){
	local a=$(realPath "${1}")
	local p=${PWD}
	local up=""
	while [[ ${a#$p/} == "$a" ]]; do
		p=${p%/*}
		up="../${up}"
	done
	echo "${up}${a#$p/}"
}



function pathChecksum() {
	local path=${1}

	if [[ ! -e ${path} ]]; then
		return
	fi
	local statArgs=()
	if stat -f '' . &>/dev/null; then # detects BSD/macOS (has -f parameter)
	  	statArgs+=(-f "%N %z %m")
	else # GNU/Linux (has -c parameter)
		statArgs+=(-c "%n %s %Y")
	fi
	if [[ -d ${path} ]]; then # if it's a dir
		find "${path}" -exec stat "${statArgs[@]}" {} + 2>/dev/null | md5sum | sed -E 's/ .*//'
	else
		stat "${statArgs[@]}" "${path}" 2>/dev/null | md5sum | sed -E 's/ .*//'
	fi
}



function startJvmWithStage2Class() {
	local compiledClassPathRoot=${1}
	shift
	local stage2Class=${1}
	shift
	local args=("${@}")

	local command=( java --class-path "${compiledClassPathRoot}" )
	if [[ ${BAIZEL_DEBUG:-} == true ]]; then
		BAIZEL_DEBUG=5005
	fi
	if [[ ${BAIZEL_DEBUG:-} != "" && ${BAIZEL_DEBUG:-} != false ]]; then
		command+=( "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:${BAIZEL_DEBUG}" )
	fi
	if [[ ${BAIZEL_JVM_OPTS:-} != "" ]]; then
		IFS=' '; command+=( ${BAIZEL_JVM_OPTS} ) # explode on spaces (no quotes)
	fi
	command+=( "${stage2Class}" )
	if [[ ${args[*]:-} != "" ]]; then
		command+=("${args[@]}")
	fi
	log INFO "Stage 1 finished -- { \"durationMs\": $(( ( $(date '+%s%N') - ${START_TIMESTAMP} ) / 1000000 )) }"
	IFS=' '; log INFO "$ ${command[*]}"
	exec "${command[@]}" # starts bootstrap stage 2
}



main "${@}"
